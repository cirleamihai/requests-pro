import random


class HeaderTools:
    """
    Tool functions that are going to help with the headers
    for this project.

    Helpful when it comes to header order, header manipulation,
    and header extraction.
    """
    language_codes = [
        'en-US', 'en-GB', 'fr-FR', 'fr-CA', 'es-ES', 'es-MX', 'de-DE',
        'it-IT', 'pt-PT', 'pt-BR', 'ru-RU', 'zh-CN', 'zh-TW', 'ja-JP',
        'ko-KR', 'ar-SA', 'hi-IN', 'tr-TR', 'nl-NL', 'sv-SE'
    ]

    @staticmethod
    def get_random_accept_language(num_languages: int = None) -> str:
        """
        Get a random Accept-Language header value with a random number of languages.
        :param num_languages: The number of languages to include in the header. By default, it's a random number between 1 and 5.
        :return: The computed Accept-Language header value.
        """
        num_languages = random.randint(1, 5) if num_languages is None else num_languages
        selected_languages = random.sample(HeaderTools.language_codes, num_languages)
        q_values = sorted([round(random.uniform(0.1, 1.0), 1) for _ in range(num_languages)], reverse=True)
        accept_language_parts = [
            f"{lang};q={q}" if q < 1 else lang
            for lang, q in zip(selected_languages, q_values)
        ]
        return ', '.join(accept_language_parts)

    @staticmethod
    def get_random_user_agent(*args, **kwargs) -> dict:
        """

        Constructs a dictionary containing a realistic Chrome user agent string and
        the associated Client Hints headers. These headers include information about the browser version,
        whether the device is mobile, and the platform.

        Returns:
            dict: A dictionary containing:
            \n\t    - "user-agent" (str): The user agent string generated by `create_user_agent`.
            \n\t    - "sec-ch-ua" (str): The `sec-ch-ua` header with browser version information.
            \n\t    - "sec-ch-ua-mobile" (str): The `sec-ch-ua-mobile` header, indicating if the device is mobile ("?1" or "?0").
            \n\t    - "sec-ch-ua-platform" (str): The `sec-ch-ua-platform` header indicating the platform (e.g., "Windows", "Linux", "macOS").

        Example:
            >>> header_helper = HeaderHelper()
            >>> headers = header_helper.get_random_user_agent()
            >>> print(headers)
            {
                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "sec-ch-ua": '"Google Chrome";v="120", "Chromium";v="120", "Not=A?Brand";v="24"',
                "sec-ch-ua-mobile": "?0",
                "sec-ch-ua-platform": "Windows"
            }

        """
        return {}


class HeaderHelper(HeaderTools):
    def __init__(self):
        self.header_order = []
        self.accept_language = self.get_random_accept_language()
        self.default_headers = {
            "Accept": "*/*",
            "Accept-Language": self.accept_language,
            "Sec-GPC": "1",
        }

    def get_header_order(self):
        return self.header_order

    def get_headers(self, client_identifier: str):
        # Create a real user agent to match the tls client identifier
        headers = self.default_headers.copy()
        user_agent_related_headers = self.get_random_user_agent(client_identifier)
        if user_agent_related_headers:
            headers.update(user_agent_related_headers)

        return headers


# Here, you can implement a concrete HeaderHelper class that contains the header order aswell
# E.g.:
class ConcreteWebsiteHeaderHelper(HeaderHelper):
    def __init__(self):
        super().__init__()
        self.header_order = [
            "method",
            "host",
            "authority",
            "scheme",
            "path",
            "connection",
            "content-length",
            "user-agent",
            "content-type",
            "sec-ch-ua-platform",
            "accept",
            "sec-gpc",
            "origin",
            "sec-fetch-site",
            "sec-fetch-mode",
            "sec-fetch-dest",
            "referer",
            "accept-encoding",
            "accept-language",
            "cookie",
            "priority",
        ]